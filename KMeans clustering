{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMRrKPDhpNqiUavpmb8NikR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/abiakshar/TSF_GRIP-Projects/blob/main/KMeans%20clustering\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cSYO43NilU6C"
      },
      "source": [
        "Abirami Baskaran"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-fnxUxT0kC_k"
      },
      "source": [
        "# **Task 3: Prediction Using Unsupervised ML**\n",
        "**K-Means Clustering Algorithm**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tb2Als8jHdTR",
        "outputId": "6d0cf4be-34a9-4561-da76-d34432ff9a67",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ab4134c5-022e-4d05-8277-707c7b763a96\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ab4134c5-022e-4d05-8277-707c7b763a96\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving Iris.csv to Iris.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pfm6sTOnHtrW"
      },
      "source": [
        "# Import necessary libraries\n",
        "import random\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5N0lbDTcIsZq",
        "outputId": "f052987c-c595-4d8f-b674-9a5abc3274f2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "# Read the dataset using pandas dataframe\n",
        "iris_df=pd.read_csv(\"Iris.csv\")\n",
        "iris_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>SepalLengthCm</th>\n",
              "      <th>SepalWidthCm</th>\n",
              "      <th>PetalLengthCm</th>\n",
              "      <th>PetalWidthCm</th>\n",
              "      <th>Species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
              "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
              "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
              "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
              "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
              "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2kXwtUPdKvDA",
        "outputId": "41e9bd66-0306-471c-ede8-979c057c12a7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "iris_df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(150, 6)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q0Kx9IslJ6jS",
        "outputId": "e3d378a6-aa70-4c75-fc99-e92c3e3475bc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Check for null values\n",
        "iris_df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id               0\n",
              "SepalLengthCm    0\n",
              "SepalWidthCm     0\n",
              "PetalLengthCm    0\n",
              "PetalWidthCm     0\n",
              "Species          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pR5ARjz1Kk-o"
      },
      "source": [
        "x=iris_df.iloc[:,[1,2,3,4]].values\n"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EDu4qz0yj8Qv",
        "outputId": "484497d7-48e0-4e6a-f0ad-987d634caa60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        " wcss=[]\n",
        " for i in range(1, 11):\n",
        "    k_means = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n",
        "    k_means.fit(X)\n",
        "    wcss.append(k_means.inertia_)\n",
        "    \n",
        "#Plotting the results onto a line graph, allowing us to observe 'The elbow'\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('The elbow method')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('WCSS') #within cluster sum of squares\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SmbLyifnsHrF"
      },
      "source": [
        "### **Setting up K-Means**\n",
        "\n",
        "KMeans class has many parameters that can be used."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "74n-FZZ0riE4"
      },
      "source": [
        "**init**: Initialization method of the centroids.\n",
        "\n",
        "Value will be: \"k-means++\". k-means++ selects initial cluster centers for k-means clustering in a smart way to speed up convergence.\n",
        "\n",
        "**n_clusters**: The number of clusters to form as well as the number of centroids to generate.\n",
        "Value will be: 3 \n",
        "\n",
        "**n_init**: Number of times the k-means algorithm will be run with different centroid seeds. \n",
        "Value will be: 10\n",
        "\n",
        "**max_iter**: Number of iterations of the KMeans algorithm for a single run."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kY9a4rc1rA_-"
      },
      "source": [
        "Initialize KMeans with the parameters, where the output parameter is called k_means."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aDI1lIWKuQo7"
      },
      "source": [
        "k_means = KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n",
        "y = kmeans.fit_predict(X)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dwd78i3rtlZD"
      },
      "source": [
        "### **Visualizing the resulting cluster**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_6SZevm0q2bE"
      },
      "source": [
        "KMeans model initialized, let's plot them and see what the clusters look like."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AdIO2SyZwgKP",
        "outputId": "002c1efe-d549-4012-a153-4ed3bb26a909",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        }
      },
      "source": [
        "# Initialize the plot with specified dimensions\n",
        "plt.figure(figsize=(15,10))\n",
        "# Create a plot\n",
        "plt.scatter(X[y == 0, 0], X[y == 0, 1], s = 150, c = 'red', label = 'Iris-setosa',marker='.')\n",
        "plt.scatter(X[y == 1, 0], X[y == 1, 1], s = 150, c = 'violet', label = 'Iris-versicolor',marker='.')\n",
        "plt.scatter(X[y == 2, 0], X[y == 2, 1], s = 150, c = 'lightgreen', label = 'Iris-virginica',marker='.')\n",
        "#Plot the centroids with specified color, but with a darker outline\n",
        "plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 200, c = 'pink',edgecolors='black')\n",
        "plt.title('KMeans',fontsize=20)\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "plt.legend()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f0b55ea5518>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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DAzolVdeUTabLXcpGCGVSunkk09WIpE4qscTrAAAAIAyeeWVVzRlyhSddtppMsaUuxwMstbqzTff1CuvvKIZM2Yc1XPoCggAAACUSTab1XHHHUeoChljjI477rhxXUkkWAEAAABlRKgKp/EeF4IVAAAAUMHq6uoOu27evHmBve4NN9wQWNvlQLACAAAAosR1pQMHvNuA5HI5SdLTTz8d2GsQrAAAAABMPGulb31LOuEEafp07/Zb3/KWl0BbW5taW1u1YMECnX322ZLevpr12muv6fzzz1dDQ4Pq6+u1ZcuWUc9/9tln1dzcrIaGBp1zzjl68cUXJUl33XXX8PKrr75a+XxeX/rSl5TJZNTQ0KCPf/zjkqR//Md/VH19verr67V+/XpJUm9vrz7ykY9o9uzZqq+v17333itJ+vrXv66mpibV19frqquuki3RPvCDWQEBAACAKFi/Xlq9Wurr8+53dXn3jZFWrSrJS+zcuVPPPPPMqJnw7rnnHl188cX6yle+onw+r76hGg7yve99TytXrtTHP/5x9ff3K5/P67nnntO9996rp556SolEQtdcc43uvvtu3XjjjfrOd76j3bt3S5J27NihO+64Q9u2bZO1Vi0tLbrgggv00ksv6V3vepd+/vOfS5L2798vSbr22mv11a9+VZL0iU98Qps2bdJll11Wkn1QLK5YAQAAAGHnutK6dW+HqiF9fdLatSXrFtjc3FxwevGmpibdcccduv7667Vnzx5NmTJl1GPe//7364YbbtA//MM/aN++faqpqdHjjz+uHTt2qKmpSQ0NDXr88cf10ksvjXpue3u7Fi1apHQ6rbq6Ol1xxRXasmWLZs2apV/84he67rrrtGXLFk2bNk2S9Mtf/lItLS2aNWuWnnjiCT377LMl2X4/CFYAAABA2PX2St3dhdd1d48OXEVKp9MFl59//vl68sknddJJJ2nZsmW688479cADD6ihoUENDQ3q7OzUX/zFX+jBBx9UTU2NPvzhD+uJJ56QtVaf/OQntXv3bu3evVvPP/+8rr/++qOu58wzz9TOnTs1a9YsrV69Wl//+teVzWZ1zTXXaMOGDdqzZ4+WL18eih9YJlgBAAAAYZdOS1OnFl43dapUWxvoy+/bt0/veMc7tHz5cl155ZXauXOnFi1aNByYGhsb9dJLL+n000/XihUrtHDhQv3Hf/yH/vRP/1QbNmzQ66+/Lknq6urSvn37JEmJREIDAwOSpNbWVv3sZz9TX1+fent79cADD6i1tVWvvvqqamtr9Zd/+Zf6whe+oJ07dw6HqOOPP149PT3asGFDoNt+tBhjBQAAAIRdLOaNpzp4jJXkBa41a7z1AWpra9M3v/lNJRIJ1dXV6c477xz1mJ/+9Kf60Y9+pEQioRNPPFFf/vKXNX36dK1bt04f/OAH5bquEomEbr31Vp166qm66qqrdM455+i9732v7r77bi1btkzNzc2SpCuvvFJz5szRo48+qi984QuKxWJKJBL67ne/q2OOOUbLly9XfX29TjzxRDU1NQW67UfLjGcGjcbGRtvZ2RlgOQAAAEDleO6553TWWWcd3YOtlW6+2RtT1d3tXalas0ZaudKbwAIlV+j4GGN2WGsbRz6WK1YAAABAFAzN/rdihXfVqrY28CtVOHoEKwAAACBKYjFp8PelEB5EXAAIiLVW1rGh+NFCAAAQLK5YAUCJWWvlbHOUbc/KOlYmaZQ6L6VkS1KGPvAAAExKBCsAKDFnm6NMW0byZpCVzVjvvpFSLanyFgcAAAJBV0AAKCFrrbLt2eFQNWxAym7J0i0QAIBJimAFAKXUL1mncHiyjh0duAAAKLO6I0yEMW/evAmsZLRXX31VixcvLuq5F154oSbyp6IIVgBQStWSSRYeR2WSRkpMcD0AgElnIiZHyuVykqSnn346sNco9Hojvetd79KGDRsmpIZ8Pu/r+QQrACghY7yJKkYFqISUak0xeQUAoGjWWmX/Lav9N+3XW//rLe2/ab+y/1a6buZtbW1qbW3VggULdPbZZ0t6+2rWa6+9pvPPP18NDQ2qr6/Xli1bDnnu/v37deqpp8p1XUlSb2+vTjnlFA0MDOjXv/61LrnkEs2dO1etra361a9+JUlatmyZPvWpT6mlpUVf/OIXtXnzZjU0NKihoUFz5szRgQMHtHfvXtXX10vygs/nP/951dfX65xzztG3v/1tSdLjjz+uOXPmaNasWfqbv/kbOY4zatt+/OMfa9asWaqvr9d11103vLyurk6f+9znNHv2bG3dutXX/mPyCgAosWRLUjKDY6qGZgVsTSnZnCx3aQCACJuIyZF27typZ555RjNmzDhk+T333KOLL75YX/nKV5TP59XX13fI+mnTpqmhoUGbN2/W/PnztWnTJl188cVKJBK66qqr9L3vfU9nnHGGtm3bpmuuuUZPPPGEJOmVV17R008/raqqKl122WW69dZbde6556qnp0ep1KHbdPvtt2vv3r3avXu34vG4urq6lM1mtWzZMj3++OM688wz9Vd/9Vf67ne/q1WrVg0/79VXX9V1112nHTt26Nhjj9UHP/hB/exnP9Pll1+u3t5etbS06KabbvK977hiBQAlZoxRqiWlaZ+bpmO+cIymfW6aUi1crQIAFG+iJkdqbm4eFaokqampSXfccYeuv/567dmzR1OmTBn1mKVLl+ree++VJP3kJz/R0qVL1dPTo6efflpLlixRQ0ODrr76ar322mvDz1myZImqqqokSeeee67+/u//XrfccoveeustxeOHXgN67LHHdPXVVw8vnz59up5//nnNmDFDZ555piTpk5/8pJ588slDntfR0aELL7xQJ5xwguLxuD7+8Y8PP6aqqkof/ehHi91dhyBYAUBAjDEy1YZABQDwb4ImR0qn0wWXn3/++XryySd10kknadmyZbrzzjv1wAMPDHfd6+zs1IIFC/TII4+oq6tLO3bs0Ac+8AG5rqtjjjlGu3fvHv7vueeeK/h6X/rSl/RP//RPymQyOvfcc4e7DAYplUoNBzu/CFYAAABA2JV5cqR9+/bpHe94h5YvX64rr7xSO3fu1KJFi4bDUmNjo+rq6tTU1KSVK1fq0ksvVVVVlaZOnaoZM2bovvvuk+Rdefv3f//3gq/x61//WrNmzdJ1112npqamUcHqoosu0ve///3hiS66uro0c+ZM7d27V//1X/8lSfrRj36kCy644JDnNTc3a/PmzXrjjTeUz+f14x//eNRjSoFgBQAAAIRcuSdHamtr0+zZszVnzhzde++9WrlyZcHHLV26VHfddZeWLl06vOzuu+/WD3/4Q82ePVvvec97tHHjxoLPXb9+/fDEFIlEQh/60IcOWX/llVfq3e9+t8455xzNnj1b99xzj1KplO644w4tWbJEs2bNUiwW06c+9alDnvfOd75TN954o+bPn6/Zs2dr7ty5Wrhwoc89MpoZT3/MxsZGO5FzwQMAAACT2XPPPaezzjrrqB5rrZWz3Sk4ORLdzoNR6PgYY3ZYaxtHPpZZAQEAAIAIGJocKdmc9MZUJUSgChGCFQAAABAhxhiputxVYCTGWAEAAACATwQrAAAAAPCJYAUAAAAAPhGsAAAAAMAnghUAAABQwerq6g67bt68eb7b/+pXv6rHHntsXM958MEHdeONNx7xMa+++qoWL17sp7SS4nesAAAAgDIZz+9YDbHWakADSihRkunW6+rq1NPTc8iyXC6neDzYCcTz+byqqqoCfQ2/xvM7VlyxAgAAACLAWqud2Z26ff/t+v5b39ft+2/XzuxOjedCyZG0tbWptbVVCxYs0Nlnny3p7atZr732ms4//3w1NDSovr5eW7ZsOeS5+/fv16mnnirXdSVJvb29OuWUUzQwMKBly5Zpw4YNkqTTTjtN1113nd773vfqvvvu08MPP6w/+ZM/0dy5c7VixQpdeumlkqR//ud/1rXXXitJWrZsmVasWKF58+bp9NNPH25r7969qq+vl+SFtM9//vOqr6/XOeeco29/+9uSpK9//etqampSfX29rrrqqpLtq0L4HSsAAAAgAnY5u7Q1s1U55SRJWZvV1sxWGRnNSc0pyWvs3LlTzzzzjGbMmHHI8nvuuUcXX3yxvvKVryifz6uvr++Q9dOmTVNDQ4M2b96s+fPna9OmTbr44ouVSCRGvcZxxx2nnTt3KpvN6owzztCTTz6pGTNm6M///M8PW9drr72m9vZ2/epXv9KCBQtGdQG8/fbbtXfvXu3evVvxeFxdXV2SpGuvvVZf/epXJUmf+MQntGnTJl122WVF7ZuxcMUKAAAACDlrrTqyHcOhakhOOW3Pbi/ZlZjm5uZRoUqSmpqadMcdd+j666/Xnj17NGXKlFGPWbp0qe69915J0k9+8hMtXbq04GsMLf/Vr36l008/ffj1jhSsLr/8csViMZ199tn63e9+N2r9Y489pquvvnq4++L06dMlSb/85S/V0tKiWbNm6YknntCzzz57pM33hWAFAAAAhNyABtRv+wuu67f9GtBASV4nnU4XXH7++efrySef1EknnaRly5bpzjvv1AMPPKCGhgY1NDSos7NTCxYs0COPPKKuri7t2LFDH/jAB8b1GkeSTCaH//9oQ2Q2m9U111yjDRs2aM+ePVq+fLmy2ey4X/toEawAAACAkEsooWpTXXBdtalWQqO73JXSvn379I53vEPLly/XlVdeqZ07d2rRokXavXu3du/ercbGRtXV1ampqUkrV67UpZdeOubEFDNnztRLL72kvXv3StLw1a5iXHTR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\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PpiaT0Zc6ahG"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
# -*- coding: utf-8 -*-
"""DecisionTreeClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tGtt571EhRWseSY4d6v0w3umWERLg8Uo

### **Abirami Baskaran**

# **Task 2: Prediction Using Decision Tree Algorithm**

Use the Decision Tree classification algorithm to build a model from data of Iris plant, and what class is a flower with the respective feature? Then use the trained decision tree to predict the class of a species.
"""

from google.colab import drive

drive.mount('/content/gdrive')

from google.colab import files
uploaded=files.upload()

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

"""### **About the Dataset**

To build a model to classify Iris plant into three species which might be appropriate with some properties about each flower. The feature sets of this dataset are SepalLength, SepalWidth, PetalLength, PetalWidth and the target is the Species.

It is a sample of binary classifier, and we can use the training part of the dataset to build a decision tree, and then use it to predict a new data.
"""

# read the data using pandas dataframe
import io
iris_data=pd.read_csv(io.BytesIO(uploaded['Iris.csv']))

iris_data.head()

iris_data.tail()

iris_data.shape

iris_data['Species'].value_counts()

"""### **Pre-Processing**

* X as the Feature Matrix (data of iris_data)
* y as the response vector (target)
"""

X=iris_data[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']].values
X[0:5]

y=iris_data[['Species']]
y[0:5]

"""### **Setting up the Decision Tree**

Let's import train/test split

Now train_test_split will return 4 different parameters:

X_trainset, X_testset, y_trainset, y_testset

The train_test_split will need the parameters:

X, y, test_size=0.3, and random_state=3.

The X and y are the arrays required before the split, the test_size represents the ratio of the testing dataset, and the random_state ensures that we obtain the same splits.
"""

from sklearn.model_selection import train_test_split

X_trainset,X_testset,y_trainset,y_testset=train_test_split(X,y,test_size=0.3,random_state=3)

print("Trainset:",X_trainset.shape,y_trainset.shape)

print("Testset:",X_testset.shape,y_testset.shape)

"""### **Modelling**

Create an instance of the DecisionTreeClassifier called speciestree.  
Inside of the classifier, specify criterion="entropy" so we can see the information gain of each node.
"""

speciestree=DecisionTreeClassifier(criterion="entropy",max_depth=4)
speciestree

"""Next, fit the data with the training feature matrix X_trainset and training response vector y_trainset"""

speciestree.fit(X_trainset,y_trainset)

"""### **Prediction**

Let's make some predictions on the testing dataset and store it into a variable called predtree
"""

predtree=speciestree.predict(X_testset)

"""Printout predtree and y_testset to visually compare the prediction to the actual values."""

print(predtree [0:5])
print(y_testset [0:5])

"""### **Evaluation**

Let's import metrics from sklearn and check the accuracy of the model
"""

from sklearn import metrics
print("DecisionTreeAccuracy:",metrics.accuracy_score(y_testset,predtree))

"""### **Visualization**

Let's visualize the tree

The basic intiution behind a decision tree is to map out all possible decision paths in the form of a tree.

Decision Tree Learning Algorithm:
1. Choose an attribute from the dataset.
2. Calculate the significance of attribute in splitting of data.
3. Split the data based on the value of the best attribute
4. Go to step 1
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install six
from sklearn.externals.six import StringIO
import pydotplus
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
from sklearn import tree
# %matplotlib inline

dot_data = StringIO()
filename = "speciestree.png"
featureNames = iris_data.columns[1:5]
targetNames = iris_data["Species"].unique().tolist()
out=tree.export_graphviz(speciestree,feature_names=featureNames, out_file=dot_data, class_names=np.unique(y_trainset), node_ids=False,filled=True, special_characters=True,rotate=False)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(15, 15))
plt.imshow(img,interpolation='nearest')

